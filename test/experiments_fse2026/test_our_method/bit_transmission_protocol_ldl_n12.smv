MODULE main
VAR s : {snd,rcv,sr,none}; 
    -- s=snd: transfer message from sender to receiver; 
    -- s=rcv: transfer message from receiver to sender; 
    -- s=sr: transfer message bidirectionally between sender and receiver
    -- s=none: no message being transfered between sender and receiver

    sndr : sender(s, rcvr.act);
    rcvr : receiver(s, sndr.act);
DEFINE
    bit0:=(sndr.bit=0);
    recack:=sndr.ack;
    envworks:=(s=sr);

INIT s=none;

FAIRNESS envworks;

LTLSPEC bit0 -> X1;

--------------------------------- No.1 formula ---------------------------------
--The original LTDL formula: bit0 -> (<(((((((((((bit0 ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0)*>recack)
--The LTL formula to be verified: LTLSPEC bit0 -> X1;
--The following SMV code is the tester for the LTDL formula without [] operator: bit0 -> (<(((((((((((bit0 ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0)*>recack)

--The output variables for 1 principally temporal sub-formula(s):
--  (1) X1: <(((((((((((bit0 ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0)*>recack

--------- No.1 sub-tester for <(((((((((((bit0 ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0)*>recack ---------
VAR X1 : boolean;   Y1 : boolean; -- X1 is the output variable
    X2 : boolean;   Y2 : boolean;
    X3 : boolean;   Y3 : boolean;
    X4 : boolean;   Y4 : boolean;
    X5 : boolean;   Y5 : boolean;
    X6 : boolean;   Y6 : boolean;
    X7 : boolean;   Y7 : boolean;
    X8 : boolean;   Y8 : boolean;
    X9 : boolean;   Y9 : boolean;
    X10 : boolean;  Y10 : boolean;
    X11 : boolean;  Y11 : boolean;
    X12 : boolean;  Y12 : boolean;

--After optimized and renamed:
--The Path Grammar of (((((((((((bit0 ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0) ; bit0)*:
--  Start variable: 1
--  Variables: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
--  Productions:
--    (1) 1 --> Îµ
--    (2) 1 --> bit0 2
--    (3) 2 --> bit0 3
--    (4) 3 --> bit0 4
--    (5) 4 --> bit0 5
--    (6) 5 --> bit0 6
--    (7) 6 --> bit0 7
--    (8) 7 --> bit0 8
--    (9) 8 --> bit0 9
--    (10) 9 --> bit0 10
--    (11) 10 --> bit0 11
--    (12) 11 --> bit0 12
--    (13) 12 --> bit0
--    (14) 12 --> bit0 1

TRANS X1 <-> (recack | (bit0 & next(X2)));
TRANS X2 <-> (bit0 & next(X3));
TRANS X3 <-> (bit0 & next(X4));
TRANS X4 <-> (bit0 & next(X5));
TRANS X5 <-> (bit0 & next(X6));
TRANS X6 <-> (bit0 & next(X7));
TRANS X7 <-> (bit0 & next(X8));
TRANS X8 <-> (bit0 & next(X9));
TRANS X9 <-> (bit0 & next(X10));
TRANS X10 <-> (bit0 & next(X11));
TRANS X11 <-> (bit0 & next(X12));
TRANS X12 <-> ((bit0 & next(recack)) | (bit0 & next(X1)));
TRANS Y1 -> (recack | (bit0 & next(Y2)));
TRANS Y2 -> (bit0 & next(Y3));
TRANS Y3 -> (bit0 & next(Y4));
TRANS Y4 -> (bit0 & next(Y5));
TRANS Y5 -> (bit0 & next(Y6));
TRANS Y6 -> (bit0 & next(Y7));
TRANS Y7 -> (bit0 & next(Y8));
TRANS Y8 -> (bit0 & next(Y9));
TRANS Y9 -> (bit0 & next(Y10));
TRANS Y10 -> (bit0 & next(Y11));
TRANS Y11 -> (bit0 & next(Y12));
TRANS Y12 -> ((bit0 & next(recack)) | (bit0 & next(Y1)));
JUSTICE ((((((((((X1=Y1 & X2=Y2) & X3=Y3) & X4=Y4) & X5=Y5) & X6=Y6) & X7=Y7) & X8=Y8) & X9=Y9) & X10=Y10) & X11=Y11) & X12=Y12;
JUSTICE ((((((((((!Y1 & !Y2) & !Y3) & !Y4) & !Y5) & !Y6) & !Y7) & !Y8) & !Y9) & !Y10) & !Y11) & !Y12;

-------------------------------------------------------------------------------
-- the sender module
-- env_state is the state of the main module (the environment)
-- rcvr_act is the action of the receiver
MODULE sender(env_state, rcvr_act)
VAR bit : {0,1}; 
    ack : boolean;
    act : {sb0, sb1, nothing}; -- the set of actions

ASSIGN
-- the action protocol
act := case     
    bit=0 & ack=FALSE : sb0; 
    bit=1 & ack=FALSE : sb1; 
    ack=TRUE : nothing; 
esac;

-- the evolution of variables (i.e., the transitions between states)
init(ack):=FALSE;
next(bit):=bit;
next(ack) := case
    ack=FALSE & (rcvr_act=sndack & (env_state=rcv | env_state=sr)) : TRUE;
    TRUE : ack;
esac;


-------------------------------------------------------------------------------
-- the receiver module
-- env_state is the state of the main module (the environment)
-- sndr_act is the action of the sender
MODULE receiver(env_state, sndr_act)
VAR s : {empty, r0, r1};
    act : {nothing, sndack}; -- the set of actions

ASSIGN
-- the action protocol
act := case
    s=empty : nothing;
    s=r0 | s=r1 : sndack;
esac;

-- the evolution of variables (i.e., the transitions between states)
init(s):=empty;
next(s) := case
    s=empty & sndr_act=sb0 & (env_state=snd | env_state=sr) : r0;
    s=empty & sndr_act=sb1 & (env_state=snd | env_state=sr) : r1;
    TRUE : s;
esac;







