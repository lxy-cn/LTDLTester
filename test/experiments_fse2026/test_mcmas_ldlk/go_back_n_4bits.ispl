-- The Go-Back-N ARQ protocol.
-- Three bits, using N = 2.

Semantics=SingleAssignment;

Agent Environment
  Vars:
    state : {S,R,SR,none};
    s_r_1: {b0, b1, empty};
    s_r_1_seq: 0..3;
    s_r_2: {b0, b1, empty};
    s_r_2_seq: 0..3;
    s_r_3: {b0, b1, empty};
    s_r_3_seq: 0..3;
    r_s_1: 0..3;
    r_s_2: 0..3;
    r_s_3: 0..3;
  end Vars
  Actions = {S,SR,R,none};
  Protocol:
    state=S: {S,SR,R,none};
    state=R: {S,SR,R,none};
    state=SR: {S,SR,R,none};
    state=none: {S,SR,R,none};
  end Protocol
  Evolution:
    state=S if (Action=S);
    state=R if (Action=R);
    state=SR if (Action=SR);
    state=none if (Action=none);

    s_r_3=b0 if (s_r_2=b0) and (Action=SR or Action=S);
    s_r_3=empty if (Action=R or Action=none) or (s_r_2=empty);
    s_r_2=b0 if (s_r_1=b0 and (Action=SR or Action=S));
    s_r_2=empty if (Action=R or Action=none) or (s_r_1=empty);
    s_r_1=b0 if ((Sender.Action=b10 or Sender.Action=b20 or Sender.Action=b30));
    s_r_1=empty if (Sender.Action=none);
    s_r_3=b1 if (s_r_2=b1) and (Action=SR or Action=S);
    s_r_2=b1 if (s_r_1=b1 and (Action=SR or Action=S));
    s_r_1=b1 if (Sender.Action=b11 or Sender.Action=b21 or Sender.Action=b31);
    s_r_3=empty if (s_r_2=empty);
    s_r_3_seq=s_r_2_seq if (Action=none) or !(Action=none);
    s_r_2_seq=s_r_1_seq if (Action=none) or !(Action=none);
    s_r_1_seq=1 if (Sender.Action=b10 or Sender.Action=b11);
    s_r_1_seq=2 if (Sender.Action=b20 or Sender.Action=b21);
    s_r_1_seq=3 if (Sender.Action=b30 or Sender.Action=b31);
    s_r_1_seq=3 if (Sender.Action=none);

    r_s_3=r_s_2 if (Action=S or Action=SR); 
    r_s_3=0 if (Action=R or Action=none);

    r_s_2=r_s_1 if (Action=S or Action=SR); 
    r_s_2=0 if (Action=R or Action=none);

    r_s_1=0 if (Receiver.Action=null);
    r_s_1=1 if (Receiver.Action=r1);
    r_s_1=2 if (Receiver.Action=r2);
    r_s_1=3 if (Receiver.Action=r3);
  end Evolution
end Agent

Agent Sender
  Lobsvars={s_r_1, r_s_3, s_r_1_seq};
  Vars:
    done:boolean;
    recack: 0..3;
    dispatch: 0..3;
    value1: {b0, b1};
    value2: {b0, b1};
    value3: {b0, b1};
  end Vars
  Actions = { b10, b11, b20, b21, b30, b31, none};
  Protocol:
    done=true : {none};
    dispatch=1 and value1=b0 : {b10};
    dispatch=1 and value1=b1 : {b11};
    dispatch=2 and value2=b0 : {b20};
    dispatch=2 and value2=b1 : {b21};
    dispatch=3 and value3=b0 and done=false : {b30};
    dispatch=3 and value3=b1 and done=false : {b31};
    Other : {none};
  end Protocol
  Evolution:
    (done=true) if (done=false) and 
       ( ( (Environment.r_s_3=3) ) 
        or
       ( (Environment.r_s_3=3) )
       );
    (recack = 1) if (Environment.r_s_3=1);
    (recack = 2) if (Environment.r_s_3=2);
    (recack = 3) if (Environment.r_s_3=3 or done=true);
    (dispatch=dispatch+1) if (done=false) and (recack + 2 > dispatch) and (dispatch < 3);
    (dispatch=recack+1) if ((done=false) and (Environment.r_s_3 = recack)) or !((done=false) and (recack + 2 > dispatch) and (dispatch < 3));
    (dispatch=dispatch) if (done=true);
  end Evolution
end Agent

Agent Receiver
  Lobsvars={r_s_1, s_r_3, s_r_3_seq};
  Vars:
    recv1 : { empty, r0, r1 };
    recv2 : { empty, r0, r1 };
    recv3 : { empty, r0, r1 };
  end Vars
  Actions = {null, r1, r2, r3};
  Protocol:
    recv1=empty : {null};
    (recv1 <> empty and recv2 = empty): {r1};
    (recv2 <> empty and recv3 = empty): {r2};
    (recv3 <> empty): {r3};
  end Protocol
  Evolution:
    recv1=r0 if ( ( (Environment.s_r_3=b0) and (recv1=empty) and 
                    (Environment.s_r_3_seq=1) ) );
    recv1=r1 if ( ( (Environment.s_r_3=b1) and (recv1=empty) and 
                    (Environment.s_r_3_seq=1) ) );
    recv2=r0 if ( ( (Environment.s_r_3=b0) and (recv2=empty) and (recv1<>empty) and
                    (Environment.s_r_3_seq=2) ) );
    recv2=r1 if ( ( (Environment.s_r_3=b1) and (recv2=empty) and (recv1<>empty) and
                    (Environment.s_r_3_seq=2) ) );
    recv3=r0 if ( ( (Environment.s_r_3=b0) and (recv3=empty) and (recv2<>empty) and
                    (Environment.s_r_3_seq=3) ) );
    recv3=r1 if ( ( (Environment.s_r_3=b1) and (recv3=empty) and (recv2<>empty) and
                    (Environment.s_r_3_seq=3) ) );
  end Evolution
end Agent

Evaluation
  envsending if ( Environment.state=SR or Environment.state=S );
  envreceiving if ( Environment.state=SR or Environment.state=R );

  envworks if ( Environment.state=SR );
  envbroken if ( Environment.state = none );
  tt if (Receiver.recv3 <> empty) or (Receiver.recv3 = empty);
  b3mismatch if (Receiver.recv3=r0 and Sender.value3=b1) or (Receiver.recv3=r1 and Sender.value3=b0);
  receiverDone if (Receiver.recv1 <> empty and Receiver.recv2 <> empty and Receiver.recv3 <> empty);
  b30 if (Sender.value3=b0);
  b31 if (Sender.value3=b1);
  senderDone if (Sender.done = true);
    mismatch1 if (Receiver.recv1=r0 and Sender.value1=b1) or (Receiver.recv1=r1 and Sender.value1=b0);
  rbit20 if (Receiver.recv2=r0);
  rbit21 if (Receiver.recv2=r1);
  sbit20 if (Sender.value2=b0);
  sbit21 if (Sender.value2=b1);
  mismatch2 if (Receiver.recv2=r0 and Sender.value2=b1) or (Receiver.recv2=r1 and Sender.value2=b0);
  rbit30 if (Receiver.recv3=r0);
  rbit31 if (Receiver.recv3=r1);
  sbit30 if (Sender.value3=b0);
  sbit31 if (Sender.value3=b1);
  mismatch3 if (Receiver.recv3=r0 and Sender.value3=b1) or (Receiver.recv3=r1 and Sender.value3=b0);

end Evaluation

InitStates
  (
    Environment.s_r_1=empty and
    Environment.s_r_2=empty and
    Environment.s_r_3=empty and
    Environment.r_s_1=0 and
    Environment.r_s_2=0 and
    Environment.r_s_3=0 and
    Sender.done=false and
    Sender.recack=0 and
    Sender.dispatch=1 and
    Receiver.recv1=empty and
    Receiver.recv2=empty and
    Receiver.recv3=empty
  );
end InitStates

Groups
  g1 = {Sender,Receiver};
end Groups

Fairness
  envworks;
end Fairness

Formulae

--LDL ([(   ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks))   )*]tt) -> <tt*>senderDone; --n=2

LDL ([(   ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks))   )*]tt) -> <tt*>senderDone; --n=4

--LDL ([(   ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks))   )*]tt) -> <tt*>senderDone; --n=6

--LDL ([(   ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks))   )*]tt) -> <tt*>senderDone; --n=8

--LDL ([(   ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks));  ((envworks;envbroken)+(envbroken;envworks))   )*]tt) -> <tt*>senderDone; --n=10


end Formulae
